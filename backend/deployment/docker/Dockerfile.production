# Multi-stage Dockerfile for Production Deployment
# Advanced Notification System

# Stage 1: Build Stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for building)
RUN npm ci --include=dev

# Copy source code
COPY . .

# Run tests (optional - can be skipped with build arg)
ARG SKIP_TESTS=false
RUN if [ "$SKIP_TESTS" = "false" ]; then npm test; fi

# Build application (if build script exists)
RUN if [ -f "package.json" ] && grep -q '"build"' package.json; then npm run build; fi

# Remove dev dependencies
RUN npm prune --production

# Stage 2: Production Stage
FROM node:18-alpine AS production

# Install production system dependencies
RUN apk add --no-cache \
    curl \
    dumb-init \
    tzdata \
    ca-certificates \
    && update-ca-certificates

# Set timezone
ENV TZ=UTC

# Create app directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

# Copy package files
COPY --from=builder /app/package*.json ./

# Copy node_modules from builder stage
COPY --from=builder /app/node_modules ./node_modules

# Copy application code
COPY --from=builder /app/src ./src
COPY --from=builder /app/server.js ./
COPY --from=builder /app/ecosystem.config.js ./

# Copy configuration files
COPY --from=builder /app/config ./config

# Copy migration files (if they exist)
COPY --from=builder /app/migrations ./migrations 2>/dev/null || true

# Create necessary directories
RUN mkdir -p logs uploads temp && \
    chown -R nodejs:nodejs /app

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000
ENV NPM_CONFIG_LOGLEVEL=warn

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["node", "server.js"]

# Metadata
LABEL maintainer="Healthcare Platform Team <dev@yourdomain.com>"
LABEL version="1.0.0"
LABEL description="Advanced Notification System - Production Image"
LABEL org.opencontainers.image.source="https://github.com/yourdomain/notification-system"
LABEL org.opencontainers.image.documentation="https://docs.yourdomain.com/notification-system"
LABEL org.opencontainers.image.licenses="MIT"